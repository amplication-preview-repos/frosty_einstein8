/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DistributorManagementService } from "../distributorManagement.service";
import { DistributorManagementCreateInput } from "./DistributorManagementCreateInput";
import { DistributorManagement } from "./DistributorManagement";
import { DistributorManagementFindManyArgs } from "./DistributorManagementFindManyArgs";
import { DistributorManagementWhereUniqueInput } from "./DistributorManagementWhereUniqueInput";
import { DistributorManagementUpdateInput } from "./DistributorManagementUpdateInput";

export class DistributorManagementControllerBase {
  constructor(protected readonly service: DistributorManagementService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DistributorManagement })
  async createDistributorManagement(
    @common.Body() data: DistributorManagementCreateInput
  ): Promise<DistributorManagement> {
    return await this.service.createDistributorManagement({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DistributorManagement] })
  @ApiNestedQuery(DistributorManagementFindManyArgs)
  async distributorManagements(
    @common.Req() request: Request
  ): Promise<DistributorManagement[]> {
    const args = plainToClass(DistributorManagementFindManyArgs, request.query);
    return this.service.distributorManagements({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DistributorManagement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async distributorManagement(
    @common.Param() params: DistributorManagementWhereUniqueInput
  ): Promise<DistributorManagement | null> {
    const result = await this.service.distributorManagement({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DistributorManagement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDistributorManagement(
    @common.Param() params: DistributorManagementWhereUniqueInput,
    @common.Body() data: DistributorManagementUpdateInput
  ): Promise<DistributorManagement | null> {
    try {
      return await this.service.updateDistributorManagement({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DistributorManagement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDistributorManagement(
    @common.Param() params: DistributorManagementWhereUniqueInput
  ): Promise<DistributorManagement | null> {
    try {
      return await this.service.deleteDistributorManagement({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
