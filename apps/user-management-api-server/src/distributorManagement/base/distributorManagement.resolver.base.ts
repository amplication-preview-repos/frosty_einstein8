/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DistributorManagement } from "./DistributorManagement";
import { DistributorManagementCountArgs } from "./DistributorManagementCountArgs";
import { DistributorManagementFindManyArgs } from "./DistributorManagementFindManyArgs";
import { DistributorManagementFindUniqueArgs } from "./DistributorManagementFindUniqueArgs";
import { DeleteDistributorManagementArgs } from "./DeleteDistributorManagementArgs";
import { DistributorManagementService } from "../distributorManagement.service";
@graphql.Resolver(() => DistributorManagement)
export class DistributorManagementResolverBase {
  constructor(protected readonly service: DistributorManagementService) {}

  async _distributorManagementsMeta(
    @graphql.Args() args: DistributorManagementCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DistributorManagement])
  async distributorManagements(
    @graphql.Args() args: DistributorManagementFindManyArgs
  ): Promise<DistributorManagement[]> {
    return this.service.distributorManagements(args);
  }

  @graphql.Query(() => DistributorManagement, { nullable: true })
  async distributorManagement(
    @graphql.Args() args: DistributorManagementFindUniqueArgs
  ): Promise<DistributorManagement | null> {
    const result = await this.service.distributorManagement(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DistributorManagement)
  async deleteDistributorManagement(
    @graphql.Args() args: DeleteDistributorManagementArgs
  ): Promise<DistributorManagement | null> {
    try {
      return await this.service.deleteDistributorManagement(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
