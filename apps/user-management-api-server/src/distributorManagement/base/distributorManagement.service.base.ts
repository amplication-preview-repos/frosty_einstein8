/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  DistributorManagement as PrismaDistributorManagement,
} from "@prisma/client";

export class DistributorManagementServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DistributorManagementCountArgs, "select">
  ): Promise<number> {
    return this.prisma.distributorManagement.count(args);
  }

  async distributorManagements(
    args: Prisma.DistributorManagementFindManyArgs
  ): Promise<PrismaDistributorManagement[]> {
    return this.prisma.distributorManagement.findMany(args);
  }
  async distributorManagement(
    args: Prisma.DistributorManagementFindUniqueArgs
  ): Promise<PrismaDistributorManagement | null> {
    return this.prisma.distributorManagement.findUnique(args);
  }
  async createDistributorManagement(
    args: Prisma.DistributorManagementCreateArgs
  ): Promise<PrismaDistributorManagement> {
    return this.prisma.distributorManagement.create(args);
  }
  async updateDistributorManagement(
    args: Prisma.DistributorManagementUpdateArgs
  ): Promise<PrismaDistributorManagement> {
    return this.prisma.distributorManagement.update(args);
  }
  async deleteDistributorManagement(
    args: Prisma.DistributorManagementDeleteArgs
  ): Promise<PrismaDistributorManagement> {
    return this.prisma.distributorManagement.delete(args);
  }
}
