/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RetailerManagementService } from "../retailerManagement.service";
import { RetailerManagementCreateInput } from "./RetailerManagementCreateInput";
import { RetailerManagement } from "./RetailerManagement";
import { RetailerManagementFindManyArgs } from "./RetailerManagementFindManyArgs";
import { RetailerManagementWhereUniqueInput } from "./RetailerManagementWhereUniqueInput";
import { RetailerManagementUpdateInput } from "./RetailerManagementUpdateInput";

export class RetailerManagementControllerBase {
  constructor(protected readonly service: RetailerManagementService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: RetailerManagement })
  async createRetailerManagement(
    @common.Body() data: RetailerManagementCreateInput
  ): Promise<RetailerManagement> {
    return await this.service.createRetailerManagement({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [RetailerManagement] })
  @ApiNestedQuery(RetailerManagementFindManyArgs)
  async retailerManagements(
    @common.Req() request: Request
  ): Promise<RetailerManagement[]> {
    const args = plainToClass(RetailerManagementFindManyArgs, request.query);
    return this.service.retailerManagements({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: RetailerManagement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async retailerManagement(
    @common.Param() params: RetailerManagementWhereUniqueInput
  ): Promise<RetailerManagement | null> {
    const result = await this.service.retailerManagement({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: RetailerManagement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRetailerManagement(
    @common.Param() params: RetailerManagementWhereUniqueInput,
    @common.Body() data: RetailerManagementUpdateInput
  ): Promise<RetailerManagement | null> {
    try {
      return await this.service.updateRetailerManagement({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: RetailerManagement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRetailerManagement(
    @common.Param() params: RetailerManagementWhereUniqueInput
  ): Promise<RetailerManagement | null> {
    try {
      return await this.service.deleteRetailerManagement({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
