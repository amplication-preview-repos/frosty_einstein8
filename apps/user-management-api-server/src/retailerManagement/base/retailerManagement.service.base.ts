/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  RetailerManagement as PrismaRetailerManagement,
} from "@prisma/client";

export class RetailerManagementServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.RetailerManagementCountArgs, "select">
  ): Promise<number> {
    return this.prisma.retailerManagement.count(args);
  }

  async retailerManagements(
    args: Prisma.RetailerManagementFindManyArgs
  ): Promise<PrismaRetailerManagement[]> {
    return this.prisma.retailerManagement.findMany(args);
  }
  async retailerManagement(
    args: Prisma.RetailerManagementFindUniqueArgs
  ): Promise<PrismaRetailerManagement | null> {
    return this.prisma.retailerManagement.findUnique(args);
  }
  async createRetailerManagement(
    args: Prisma.RetailerManagementCreateArgs
  ): Promise<PrismaRetailerManagement> {
    return this.prisma.retailerManagement.create(args);
  }
  async updateRetailerManagement(
    args: Prisma.RetailerManagementUpdateArgs
  ): Promise<PrismaRetailerManagement> {
    return this.prisma.retailerManagement.update(args);
  }
  async deleteRetailerManagement(
    args: Prisma.RetailerManagementDeleteArgs
  ): Promise<PrismaRetailerManagement> {
    return this.prisma.retailerManagement.delete(args);
  }
}
